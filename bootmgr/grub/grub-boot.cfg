#
# Copyright (C) 2024 The LineageOS Project
#
# SPDX-License-Identifier: Apache-2.0
#

set ab_enable=@AB_OTA_UPDATER@
export ab_enable

if [ "$ab_enable" = "true" ]; then
	set boot_ramdisk_filename=combined-ramdisk-recovery.img
	set partition_misc='(hd0,gpt3)'
	set partition_persist='(hd0,gpt4)'
	set partition_grub_boot_a='(hd0,gpt7)'
	set partition_grub_boot_b='(hd0,gpt8)'
	export partition_grub_boot_a
	export partition_grub_boot_b
else
	set boot_ramdisk_filename=combined-ramdisk.img
	set partition_misc='(hd0,gpt3)'
	set partition_persist='(hd0,gpt9)'
fi
export boot_ramdisk_filename
export partition_misc
export partition_persist

# Default to empty (which is typically EFI partition)
set boot_partition=
export boot_partition

function set_kernel_cmdline_dynamic {
	load_env -f ${partition_persist}/grubenv android_insecure_adb android_lcd_density android_low_perf android_nobootanim android_selinux_permissive android_theme android_wifi_impl grub_timeout kms_display_resolution mitigations quiet

	set kernel_cmdline_dynamic=

	if [ "$android_insecure_adb" = "1" ]; then
		set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} androidboot.insecure_adb=1"
	fi

	if [ "$android_lcd_density" ]; then
		set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} androidboot.lcd_density=${android_lcd_density}"
	fi

	if [ "$android_low_perf" = "1" ]; then
		set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} androidboot.low_perf=1"
	fi

	if [ "$android_nobootanim" = "1" ]; then
		set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} androidboot.nobootanim=1"
	fi

	if [ "$android_selinux_permissive" = "1" ]; then
		set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} androidboot.selinux=permissive"
	fi

	if [ "$android_theme" = "1" ]; then
		# Light
		set androidboot_theme=0
	elif [ "$android_theme" = "2" ]; then
		# Dark
		set androidboot_theme=1
	fi
	set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} androidboot.theme=${androidboot_theme}"

	if [ "$android_wifi_impl" ]; then
		set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} androidboot.wifi_impl=${android_wifi_impl}"
	fi

	if [ "$kms_display_resolution" ]; then
		set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} virtio_gpu.force_resolution=${kms_display_resolution} vmwgfx.force_resolution=${kms_display_resolution}"
	fi

	if [ "$mitigations" = "off" ]; then
		set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} mitigations=off"
	fi

	if [ "$quiet" = "1" ]; then
		set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} quiet"
	fi

	if [ "$ab_enable" = "true" ]; then
		if [ "$abootctrl_global_active_slot" ]; then
			set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} androidboot.slot_suffix=_${abootctrl_global_active_slot}"
		fi
		if [ "$androidboot_mode" = "recovery" ]; then
			set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} androidboot.mode=recovery"
		else
			set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} androidboot.force_normal_boot=1"
		fi
	fi

	if [ "$kernel_cmdline_dynamic_device_specific" ]; then
		set kernel_cmdline_dynamic="${kernel_cmdline_dynamic} ${kernel_cmdline_dynamic_device_specific}"
	fi

	export kernel_cmdline_dynamic
}

function save_setting {
	set ${1}=${2}
	save_env -f ${partition_persist}/grubenv ${1}
}

function ab_load_needed_env {
	for global_item in active_slot; do
		load_env -f ${partition_persist}/grubenv_abootctrl abootctrl_global_${global_item}
		if [ "$?" != "0" ]; then
			return 1
		fi
		export abootctrl_global_${global_item}
	done
	for slot in $ab_slots; do
		for slot_item in boot_count is_bootable; do
			load_env -f ${partition_persist}/grubenv_abootctrl abootctrl_slot_${slot}_${slot_item}
			if [ "$?" != "0" ]; then
				return 1
			fi
			export abootctrl_slot_${slot}_${slot_item}
		done
	done
}
function ab_load_unneeded_env {
	for global_item in current_slot snapshot_merge_status no_auto_slot_switch; do
		load_env -f ${partition_persist}/grubenv_abootctrl abootctrl_global_${global_item}
		export abootctrl_global_${global_item}
	done
	for slot in $ab_slots; do
		for slot_item in is_successful; do
			load_env -f ${partition_persist}/grubenv_abootctrl abootctrl_slot_${slot}_${slot_item}
			export abootctrl_slot_${slot}_${slot_item}
		done
	done
}
function ab_set_save_env {
	set ${1}=${2}
	export ${1}
	save_env -f ${partition_persist}/grubenv_abootctrl ${1}
}
function ab_check_active_slot_boot_count {
	var_name=abootctrl_slot_${abootctrl_global_active_slot}_boot_count
	eval var_value=\$$var_name
	if [ "$var_value" = "XXX" ]; then
		# Bad: Tried to boot for 3 times
		return 1
	else
		# Good
		return 0
	fi
}
function ab_update_active_slot_boot_count {
	var_name=abootctrl_slot_${abootctrl_global_active_slot}_boot_count
	if [ "$1" = "increase" ]; then
		eval var_value=\$$var_name
		set_var_value=${var_value}X
	else
		set_var_value=
	fi
	ab_set_save_env $var_name $set_var_value
}
function ab_check_active_slot_is_bootable {
	var_name=abootctrl_slot_${abootctrl_global_active_slot}_is_bootable
	eval var_value=\$$var_name
	if [ "$var_value" = "false" ]; then
		# Bad: Not bootable
		return 1
	else
		# Good
		return 0
	fi
}
function ab_set_active_slot_is_bootable {
	var_name=abootctrl_slot_${abootctrl_global_active_slot}_is_bootable
	if [ "$1" = "false" ]; then
		set_var_value=false
	else
		set_var_value=true
	fi
	ab_set_save_env $var_name $set_var_value
}
function ab_set_active_slot_is_successful {
	var_name=abootctrl_slot_${abootctrl_global_active_slot}_is_successful
	if [ "$1" = "false" ]; then
		set_var_value=false
	else
		set_var_value=true
	fi
	ab_set_save_env $var_name $set_var_value
}
function ab_set_boot_partition_var {
	var_name=partition_grub_boot_$abootctrl_global_active_slot
	eval set boot_partition=\$$var_name
	export boot_partition
}
function ab_load_active_slot {
	ab_set_boot_partition_var
	set_kernel_cmdline_dynamic
}
function ab_switch_active_slot {
	if [ "$abootctrl_global_no_auto_slot_switch" = "true" ]; then
		if [ "$1" != "manual" ]; then
			echo "WARNING: Skipping automatic slot switching as requested"
			return 1
		fi
	fi

	# Change active slot to another
	if [ "$abootctrl_global_active_slot" = "a" ]; then
		echo "Switching active slot to b..."
		ab_set_save_env abootctrl_global_active_slot b
	elif [ "$abootctrl_global_active_slot" = "b" ]; then
		echo "Switching active slot to a..."
		ab_set_save_env abootctrl_global_active_slot a
	else
		echo "Switching active slot to a..."
		ab_set_save_env abootctrl_global_active_slot a
	fi

	# Mark the new active slot as bootable
	ab_update_active_slot_boot_count clear
	ab_set_active_slot_is_bootable true

	ab_load_active_slot
}
function ab_init {
	set ab_slots="a b"
	export ab_slots
	if ! ab_load_needed_env; then
		set ab_init_failed=true
		export ab_init_failed
		# Fallback
		set abootctrl_global_active_slot=a
		export abootctrl_global_active_slot
		return 1
	fi
	ab_load_unneeded_env
	ab_set_boot_partition_var
}
function pre_boot_hook {
	if [ "$ab_enable" != "true" ]; then
		set_kernel_cmdline_dynamic
		return 0
	fi

	set androidboot_mode=$1
	ab_load_active_slot

	if [ "$ab_init_failed" = "true" ]; then
		echo "WARNING: A/B initialization has failed. Default to slot ${abootctrl_global_active_slot}."
		return 0
	fi

	if [ ! -f "${boot_partition}/kernel" ]; then
		# The boot partition according to the active slot is inaccessible
		echo "ERROR: Could not access kernel from active slot ${abootctrl_global_active_slot}."
		ab_set_active_slot_is_bootable false
		ab_switch_active_slot
	fi

	if ab_check_active_slot_is_bootable; then
		if ab_check_active_slot_boot_count; then
			# Best case: Active slot is bootable and boot retry count is small
			true # Do nothing
		else
			# Active slot's boot retry count exceeds but still marked as bootable
			echo "ERROR: Boot retry count of active slot ${abootctrl_global_active_slot} exceeds."
			ab_set_active_slot_is_bootable false
			ab_switch_active_slot
		fi
	else
		# Active slot is outright marked as not bootable
		echo "ERROR: Active slot ${abootctrl_global_active_slot} is marked as not bootable."
		ab_switch_active_slot
	fi

	# Let's boot the now active slot
	echo "INFO: Booting active slot ${abootctrl_global_active_slot}..."
	ab_set_active_slot_is_successful false
	ab_update_active_slot_boot_count increase
	ab_set_save_env abootctrl_global_current_slot $abootctrl_global_active_slot
}

if [ "$ab_enable" = "true" ]; then
	ab_init
fi

load_env -f ${partition_persist}/grubenv android_theme grub_timeout
export android_theme grub_timeout

# Note: Command `loadstring` is not available in upstream grub source code
loadstring $partition_misc android_misc 0 20
if [ "$android_misc" = "boot-recovery" ]; then
	# Boot to recovery
	set default=1
	set timeout=$grub_timeout
elif [ "$android_misc" = "bootonce-bootloader" ]; then
	# Do nothing
	true
else
	# Normal boot
	set default=0
	set timeout=$grub_timeout
fi

# For temporary testing
#android_theme=1
#set default=0
#set timeout=30

set gfxmode=1024x768
if insmod efi_gop; then
	terminal_output gfxterm
	loadfont /boot/grub/fonts/unicode.pf2

	insmod gfxmenu
	insmod jpeg
	insmod png
	insmod tga

	if [ "$ab_init_failed" != "true" ]; then
		if [ -f /boot/grub/themes/@BOOTMGR_THEME@/theme.cfg ]; then
			source /boot/grub/themes/@BOOTMGR_THEME@/theme.cfg

			set export_theme="$theme"
			export export_theme
		fi
	fi
fi

if [ ! "$export_theme" ]; then
	if [ "$ab_init_failed" = "true" ]; then
		# Red
		background_color 255,0,0
		set timeout='-1'
	elif [ "$android_theme" = "1" ]; then
		# Light
		background_color 255,255,255
		set color_normal=black/white
	elif [ "$android_theme" = "2" ]; then
		# Dark
		background_color 20,20,20
	fi
fi

source ${boot_partition}/.grub_kernel_version.cfg

source ${boot_partition}/.grub_kernel_cmdline.cfg

menuentry "@BOOTMGR_ANDROID_DISTRIBUTION_NAME@ ${kernel_version_display}" --class android {
	pre_boot_hook
	echo 'Loading kernel...'
	linux ${boot_partition}/kernel $kernel_cmdline_boot $kernel_cmdline_dynamic
	echo 'Loading ramdisk...'
	initrd ${boot_partition}/${boot_ramdisk_filename}
}

menuentry "@BOOTMGR_ANDROID_DISTRIBUTION_NAME@ ${kernel_version_display} Recovery" --class tools {
	pre_boot_hook recovery
	echo 'Loading kernel...'
	linux ${boot_partition}/kernel $kernel_cmdline_recovery $kernel_cmdline_dynamic
	echo 'Loading recovery ramdisk...'
	initrd ${boot_partition}/combined-ramdisk-recovery.img
}

function print_error_non_ab {
	echo "Non-A/B does not support boot control"
	sleep 1
}

submenu "Settings" --class application-cog {
	if [ "$export_theme" ]; then
		set theme="$export_theme"
		export theme
	fi

	submenu "A/B boot control" --class ab-testing {
		menuentry "Show details" --class text {
			if [ "$ab_enable" = "true" ]; then
				if [ "$ab_init_failed" != true ]; then
					echo "Active slot: $abootctrl_global_active_slot"
					echo "Last booted slot: $abootctrl_global_current_slot"
					echo "Snapshot merge status: $abootctrl_global_snapshot_merge_status"
					for slot in $ab_slots; do
						var_name=abootctrl_slot_${slot}_boot_count
						eval var_value=\$$var_name
						echo "Slot ${slot} - boot retry count: ${var_value}"
						var_name=abootctrl_slot_${slot}_is_bootable
						eval var_value=\$$var_name
						echo "Slot ${slot} - is bootable: ${var_value}"
						var_name=abootctrl_slot_${slot}_is_successful
						eval var_value=\$$var_name
						echo "Slot ${slot} - is successful: ${var_value}"
					done
					echo
					echo "Settings:"
					echo "- Disable automatic slot switching: $abootctrl_global_no_auto_slot_switch"
				else
					echo "A/B initialization has failed. Will boot slot ${abootctrl_global_active_slot} as fallback."
				fi
				sleep 3
			else
				print_error_non_ab
			fi
		}
		menuentry "Disable automatic slot switching" --class close-circle {
			if [ "$ab_enable" = "true" ]; then
				ab_set_save_env abootctrl_global_no_auto_slot_switch true
			else
				print_error_non_ab
			fi
		}
		menuentry "Enable automatic slot switching" --class check-circle {
			if [ "$ab_enable" = "true" ]; then
				ab_set_save_env abootctrl_global_no_auto_slot_switch false
			else
				print_error_non_ab
			fi
		}
		menuentry "Switch active slot" --class swap-horizontal-circle {
			if [ "$ab_enable" = "true" ]; then
				ab_switch_active_slot manual
				reboot # because it wouldn't get applied to the current boot
			else
				print_error_non_ab
			fi
		}
	}
	submenu "Boot animation" --class animation {
		menuentry "Show current setting" --class text {
			load_env -f ${partition_persist}/grubenv android_nobootanim
			if [ "$android_nobootanim" = "1" ]; then
				echo "Boot animation is disabled"
			else
				echo "Boot animation is enabled"
			fi
			sleep 1
		}
		menuentry "Enable boot animation" --class check-circle {
			save_setting android_nobootanim 0
		}
		menuentry "Disable boot animation" --class close-circle {
			save_setting android_nobootanim 1
		}
	}
	submenu "Display resolution" --class monitor-screenshot {
		menuentry "Show current setting" --class text {
			load_env -f ${partition_persist}/grubenv kms_display_resolution
			if [ "$kms_display_resolution" ]; then
				echo "Currently set display resolution is: $kms_display_resolution"
			else
				echo "No display resolution is set"
			fi
			sleep 1
		}
		menuentry "Unset (use default)" {
			save_setting kms_display_resolution
		}
		menuentry "360x640 (9:16)" {
			save_setting kms_display_resolution 360x640
		}
		menuentry "576x1024 (9:16)" {
			save_setting kms_display_resolution 576x1024
		}
		menuentry "720x1280 (9:16)" {
			save_setting kms_display_resolution 720x1280
		}
		menuentry "640x480 (4:3)" {
			save_setting kms_display_resolution 640x480
		}
		menuentry "800x600 (4:3)" {
			save_setting kms_display_resolution 800x600
		}
		menuentry "1024x768 (4:3)" {
			save_setting kms_display_resolution 1024x768
		}
		menuentry "1280x1024 (4:3)" {
			save_setting kms_display_resolution 1280x1024
		}
		menuentry "640x360 (16:9)" {
			save_setting kms_display_resolution 640x360
		}
		menuentry "1024x576 (16:9)" {
			save_setting kms_display_resolution 1024x576
		}
		menuentry "1280x720 (16:9)" {
			save_setting kms_display_resolution 1280x720
		}
		menuentry "1360x768 (16:9)" {
			save_setting kms_display_resolution 1360x768
		}
		menuentry "1600x900 (16:9)" {
			save_setting kms_display_resolution 1600x900
		}
		menuentry "1920x1080 (16:9)" {
			save_setting kms_display_resolution 1920x1080
		}
	}
	submenu "Insecure ADB" --class wrench {
		menuentry "Show current setting" --class text {
			load_env -f ${partition_persist}/grubenv android_insecure_adb
			if [ "$android_insecure_adb" = "1" ]; then
				echo "Insecure ADB is enabled"
			else
				echo "Insecure ADB is disabled"
			fi
			sleep 1
		}
		menuentry "Disable insecure ADB" --class close-circle {
			save_setting android_insecure_adb 0
		}
		menuentry "Enable insecure ADB" --class check-circle {
			save_setting android_insecure_adb 1
		}
	}
	submenu "Low performance optimizations" --class speedometer {
		menuentry "Show current setting" --class text {
			load_env -f ${partition_persist}/grubenv android_low_perf
			if [ "$android_low_perf" = "1" ]; then
				echo "Low performance optimizations is enabled"
			else
				echo "Low performance optimizations is disabled"
			fi
			sleep 1
		}
		menuentry "Disable low performance optimizations" --class close-circle {
			save_setting android_low_perf 0
		}
		menuentry "Enable low performance optimizations" --class check-circle {
			save_setting android_low_perf 1
		}
	}
	submenu "Mitigations" --class security {
		menuentry "Show current setting" --class text {
			load_env -f ${partition_persist}/grubenv mitigations
			if [ "$mitigations" = "off" ]; then
				echo "Mitigations is disabled"
			else
				echo "Mitigations is enabled"
			fi
			sleep 1
		}
		menuentry "Disable mitigations" --class shield-alert {
			save_setting mitigations off
		}
		menuentry "Enable mitigations" --class shield {
			save_setting mitigations auto
		}
	}
	submenu "Quiet boot" --class text-short {
		menuentry "Show current setting" --class text {
			load_env -f ${partition_persist}/grubenv quiet
			if [ "$quiet" = "1" ]; then
				echo "Quiet boot is enabled"
			else
				echo "Quiet boot is disabled"
			fi
			sleep 1
		}
		menuentry "Disable quiet boot" --class close-circle {
			save_setting quiet 0
		}
		menuentry "Enable quiet boot" --class check-circle {
			save_setting quiet 1
		}
	}
	submenu "Screen density" --class monitor-dashboard {
		menuentry "Show current setting" --class text {
			load_env -f ${partition_persist}/grubenv android_lcd_density
			if [ "$android_lcd_density" ]; then
				echo "Currently set screen density is: $android_lcd_density"
			else
				echo "No screen density is set"
			fi
			sleep 1
		}
		menuentry "Unset (use default)" {
			save_setting android_lcd_density
		}
		menuentry "MDPI (160 DPI)" {
			save_setting android_lcd_density 160
		}
		menuentry "HDPI (240 DPI)" {
			save_setting android_lcd_density 240
		}
		menuentry "XHDPI (320 DPI)" {
			save_setting android_lcd_density 320
		}
		menuentry "XXHDPI (480 DPI)" {
			save_setting android_lcd_density 480
		}
		menuentry "XXXHDPI (640 DPI)" {
			save_setting android_lcd_density 640
		}
	}
	submenu "SELinux" --class security {
		menuentry "Show current setting" --class text {
			load_env -f ${partition_persist}/grubenv android_selinux_permissive
			if [ "$android_selinux_permissive" = "1" ]; then
				echo "SELinux is in permissive mode"
			else
				echo "SELinux is in enforcing mode"
			fi
			sleep 1
		}
		menuentry "Enforcing" --class shield {
			save_setting android_selinux_permissive 0
		}
		menuentry "Permissive" --class shield-alert {
			save_setting android_selinux_permissive 1
		}
	}
	submenu "Wi-Fi implementation" --class wifi-cog {
		menuentry "Show current setting" --class text {
			load_env -f ${partition_persist}/grubenv android_wifi_impl
			if [ "$android_wifi_impl" ]; then
				echo "Currently set Wi-Fi implementation is: $android_wifi_impl"
			else
				echo "No Wi-Fi implementation is set"
			fi
			sleep 1
		}
		menuentry "No Wi-Fi implementation (Use Ethernet)" --class ethernet {
			save_setting android_wifi_impl
		}
		menuentry "VirtWifi using eth0 interface" --class wifi-arrow-up-down {
			save_setting android_wifi_impl virt_wifi
		}
	}
	submenu "GRUB: timeout" --class clock-edit {
		menuentry "Show current setting" --class text {
			load_env -f ${partition_persist}/grubenv grub_timeout
			if [ "$grub_timeout" ]; then
				echo "Currently set timeout is: $grub_timeout"
			else
				echo "No timeout is set"
			fi
			sleep 1
		}
		menuentry "Wait infinitely (-1)" {
			save_setting grub_timeout -1
		}
		menuentry "3 seconds" {
			save_setting grub_timeout 3
		}
		menuentry "5 seconds" {
			save_setting grub_timeout 5
		}
		menuentry "10 seconds" {
			save_setting grub_timeout 10
		}
		menuentry "30 seconds" {
			save_setting grub_timeout 30
		}
	}
}
